// Use .soql files to store SOQL queries.
// You can execute queries in VS Code by selecting the
//     query text and running the command:
//     SFDX: Execute SOQL Query with Currently Selected Text

//SELECT Id, Name FROM Account;



//Select Client_Name__c, Client_Objective_Notes__c, Client__c, Date_Absorbed__c, 
//Date_Acquired__c, Date_CIP__c, Date_Held__c, Date_Introduced__c, 
//Days_Since_Tested_Correct__c, Days_Since_Tested__c, Frequency__c, 
//Name, Objective_Name__c, Objective__c, ProgramObjective__c, Program_Name__c, 
//Re_Test_Recommended__c, SD_Name__c, Status__c FROM Client_Objective__c ;


//SELECT session__r.name,session__r.client__r.name, program_name__c,
      objective__r.name ,SD_Name__c,objective__r.sd__r.name 
      FROM Session_Statistics__c
      WHERE session__r.client__c = '0018t000002vfSfAAI'
      and objective__r.sd__r.Stage__c='Stage Three';


      SELECT 
        objective__r.sd__c sd__c,
        count(id) sdcount
      FROM client_objective__c
      WHERE client__c = '0019h000003s1a8AAA'
      GROUP BY objective__r.sd__c 
      ORDER BY count(id)


SELECT
        objective__r.sd__r.program__R.name progname,
        objective__r.sd__r.name sdname,
        count(id) sdcount
      FROM client_objective__c
      WHERE client__c = :clientId
      GROUP BY objective__r.sd__r.program__R.name, objective__r.sd__r.name
      ORDER BY count(id)

      SELECT objective__r.sd__r.area__c, count(id) sdcount
      FROM client_objective__c
      WHERE client__c = '0018t000002vfSfAAI'
      GROUP BY objective__r.sd__r.area__c
      ORDER BY count(id)

sfdx force:data:soql:query --query   "SELECT id, name  FROM program__c WHERE id IN (SELECT program__c FROM sd__c WHERE area__c != NULL)"

sfdx force:data:soql:query --query   "SELECT program__c, area__c, count(id) FROM sd__c WHERE area__c != NULL GROUP BY program__c, area__c"

sfdx force:data:soql:query --query   "SELECT area__c, count(id) FROM sd__c WHERE area__c != NULL GROUP BY area__c order by count(id) desc"

sfdx force:data:soql:query --query  "SELECT Id, name, stage__c FROM sd__c WHERE area__c = 'Learning to Learn'"


 sfdx force:data:soql:query --query "SELECT objective__r.sd__r.area__c, count(id) sdcount       FROM client_objective__c       WHERE client__c = '0018t000002vfSfAAI'   and objective__r.sd__r.area__c != null    GROUP BY objective__r.sd__r.area__c       ORDER BY count(id)"

sfdx force:data:soql:query --query "SELECT count(id) FROM client_objective__c       WHERE client__c = '0018t000002vfSfAAI' 

sfdx force:data:soql:query --query SELECT calendar_Year(TS_Load_DateTime__c),calendar_Month(TS_Load_DateTime__c),day_in_Month(TS_Load_DateTime__c),count(id) FROM client_objective_timeseries__c where client__c='0018t000003DbqXAAS' and status__c='ACQ' group by calendar_Year(TS_Load_DateTime__c),calendar_Month(TS_Load_DateTime__c),day_in_Month(TS_Load_DateTime__c) order by calendar_Year(TS_Load_DateTime__c),calendar_month(TS_Load_DateTime__c),day_in_month(TS_Load_DateTime__c)

<br/>Correct=${d.totalCorrect}



SELECT
         name,
          totalacquiredcorrect__c,
          totalacquiredincorrect__c,
          totalacquiredprompted__c,
          totalacquirednonresponsive__c,
          Percent_Correct__c
         
          
        FROM session_statistics__c where session__r.name='S-00167'

        select count(id) from client_objective__c



      SELECT count(id) c
      FROM client_objective_timeseries__c
      WHERE client__c ='0018t000002vfSfAAI'
      group by runId__c
      order by count(id) desc limit 1


      List<AggregateResult> l = [
      "SELECT count(id) c
      FROM client_objective_timeseries__c
      WHERE client__c ='0018t000002vfZfAAI'
      group by runId__c
      order by count(id) desc limit 1]"

    if (l.isEmpty()) 
    { 
    system.debug('empty');
    }



    L4LSessionStatsController.getD3YAxisScale('0018t000002vfZfAAI');



Id clientId='a019n000008Qx6LAAT';

Integer ts_max = 0;
    Integer curr_max = 0;
    Integer result = 0;

    // this is the current maximum
    List<AggregateResult> curr_agg = [
      SELECT count(id) c
      FROM client_objective__c
      WHERE client__c = :clientId
    ];

    curr_max = (Integer) curr_agg[0].get('c');

    // this is the current maximum of the timeseries set
    List<AggregateResult> ts_agg = [
      SELECT count(id) c
      FROM client_objective_timeseries__c
      WHERE client__c = :clientId
      GROUP BY runId__c
      ORDER BY count(id) DESC
      LIMIT 1
    ];

    if (ts_agg.isEmpty()) {
      ts_max = 0;
    } else {
      ts_max = (integer) ts_agg[0].get('c');
    }

    if (curr_max >= ts_max)
      result = curr_max;
    else
      result = ts_max;
System.debug('result = '+result);



L4LSessionStatsController.getD3YAxisScale('0018t000002vfSfAAI');


SELECT runid__c,status__c,count(id) c
      FROM client_objective_timeseries__c
      WHERE client__c = '0018t000003DbqmAAC'
      GROUP BY runid__c,Status__c
      ORDER BY count(id) DESC 



Id objectiveId='a088t000000Dt6XAAT';
Id clientId='0018t000002vfSfAAI';

try {
     Client_Objective__c co = [
      SELECT id, last_tested__c, last_tested_Correct__c
      FROM client_objective__c
      WHERE client__c = :clientid AND objective__C = :objectiveId
      LIMIT 1
    ];
    } catch (System.QueryException e) {
System.debug('error = '+e.getMessage());
throw e;
    }



      Client_Objective__c co = [
      SELECT id, last_tested__c, last_tested_Correct__c
      FROM client_objective__c
      WHERE client__c = :clientid AND objective__C = :so.objective__c
      LIMIT 1
    ];


Client_Objective__c co = [
      SELECT id, objective__c,last_tested__c, last_tested_Correct__c
      FROM client_objective__c
      LIMIT 1
    ];
    System.debug(co);


select active__c,count(id) c from client_objective__c where client__c=active__c!=true group by active__c


SELECT CronJobDetail.Name, cronjobdetail.JobType ,
  CreatedBy.name,CronExpression,EndTime,Id, 
  NextFireTime,PreviousFireTime,StartTime,State, TimesTriggered FROM 
  CronTrigger 
  where cronjobdetail.JobType = '7'
  or cronjobdetail.JobType = '9'
  order by PreviousFireTime desc limit 25


  DateTime LastExecution = DateTime.valueOf([SELECT MAX(PreviousFireTime)LastRun FROM CronTrigger WHERE CronJobDetail.Name LIKE :cronName][0].get('LastRun')


select client__c,objective_name__c,count(id) from client_objective__c group by client__c,objective_name__c


select min(createddate),max(createddate) from client_objective_timeseries__c where client__c='0018t000003DbqmAAC'

select client__c,objective_name__c,count(id) from client_objective__c where client__c='0018t000003DbqmAAC' group by client__c,objective_name__c

select min(runid__c) from client_objective_timeseries__c


select date(ts_load_datetime__c) from client_objective_timeseries__c   where runid__c = 'TSL-2022-11-000000'




select scenario__c,count(id),loggedbyusername__c from log__c where LoggedByUsername__c	not in ('mike@lfl.prod','mikeb@lfl.hyper') group by scenario__c,loggedbyusername__c order by scenario__c,count(id) desc,loggedbyusername__c


Map<Id, Session__c> sessionMap = new Map<Id, Session__c>();
List<Session__c> sessions = [SELECT Id, Name,Date__c FROM Session__c where client__c='0018t000002vfSfAAI']; 
for (Session__c session : sessions) {
    sessionMap.put(session.Id, session);
}

List<AggregateResult> arl = [
select session__c sess,client_boc__c,Client_BOC__r.Behaviour_of_Concern__r.ID,Client_BOC__r.Behaviour_of_Concern__r.Name behaviour,sum(duration_mins__c) totalduration,count(id) times  from session_boc__c
where session__r.client__c='0018t000002vfSfAAI'
group by session__c,client_boc__c,Client_BOC__r.Behaviour_of_Concern__r.ID,Client_BOC__r.Behaviour_of_Concern__r.Name];

String jsonStr='[';
for (AggregateResult ar : arl) {
Id sess = (Id) ar.get('sess');
Session__c s=sessionMap.get(sess);
Date temp=s.Date__c;
String fmtdate = temp.year()+'-'+temp.month()+'-'+temp.day();
String behaviour=(String) ar.get('behaviour');
Integer times=(Integer) ar.get('times');
Decimal totalduration = (Decimal) ar.get('totalduration');
jsonStr+='{"session":"'+s.Name+'",';
jsonStr+='"date":"'+fmtdate+'",';
jsonStr+='"behaviour":"'+behaviour+'",';
jsonStr+='"times":'+times+',';
jsonStr+='"totalduration":'+totalduration+'}';
jsonStr+=',';
}
jsonStr+=']';
System.debug(jsonStr);
  String target = ',]';
    String replacement = ']';
    String jsonret = jsonStr.replace(target, replacement);
    System.debug(jsonret);

System.debug(L4LSessionStatsController.getD3StatsByProgramAndSD('0018t000002vfSfAAI','All','All',true,'All','All'));

String j = L4LSessionStatsController.generateD3BOCJson('0018t000002vfSfAAI','70');
System.debug(j);

SELECT Id, Name, Date__c FROM Session__c  
WHERE client__c = '0018t000002vfSfAAI'  AND Date__c = LAST_N_DAYS:70 AND 
id NOT IN  (      SELECT session__c FROM session_boc__c WHERE session__r.client__c = '0018t000002vfSfAAI'
AND session__r.Date__c = LAST_N_DAYS:70)




    // now retrieve all the session bocs for this period';
    String allBocQuery = 'SELECT session__c, client_boc__c, Client_BOC__r.Behaviour_of_Concern__r.ID, Client_BOC__r.Behaviour_of_Concern__r.Name ';
    allBocQuery += 'FROM session_boc__c WHERE session__r.client__c = :clientId ';
    allBocQuery += ' AND session__r.Date__c = LAST_N_DAYS:';
    allBocQuery += periodStr;
    List<session_boc__c> bocs = new List<session_boc__c>();
    bocs = Database.query(allBocQuery);

String s = LFLDTDRateMaster.getDTDRateArray('0018t000002vfSfAAI', 3);


SELECT Client__c, TS_Load_DateTime__c,RunId__c,count(id)
  FROM Client_Objective_TimeSeries__c
  group by Client__c, TS_Load_DateTime__c,RunId__c

  SELECT Client__c, runid__c,Status__c,count(id)
  FROM Client_Objective_TimeSeries__c
  group by client__c,runid__c,Status__c
  having runid__c > 'TSL-2022-10-00000'  and runid__c < 'TSL-2023-03-99999'

  SELECT RunId__c,count(id)
  FROM Client_Objective_TimeSeries__c 
  group by RunId__c


Map<date,List<client_objective_timeseries__c>> datemap = new Map<date,List<client_objective_timeseries__c>>();
Map<string,List<client_objective_timeseries__c>> runmap = new Map<string,List<client_objective_timeseries__c>>();
for (client_objective_timeseries__c t: [select ts_load_datetime__c from client_objective_timeseries__c where runid__c > 'TSL-2022-10-00000'  and runid__c < 'TSL-2023-03-99999' limit 50000]) {
Date d = t.TS_Load_DateTime__c.date();
String r = t.Runid__c;

if (runmap.containskey(r)) {
List<client_objective_timeseries__c> runexisting = runmap.get(t);
ruexisting.add(t);
runmap.put(r,runexisting);
} else {
List<client_objective_timeseries__c> rl = new List<client_objective_timeseries__c>();
rl.add(t);
runmap.put(r,rl);
}

if (datemap.containskey(d)) {
List<client_objective_timeseries__c> existing = datemap.get(d);
existing.add(t);
datemap.put(d,existing);
} else {
List<client_objective_timeseries__c> l = new List<client_objective_timeseries__c>();
l.add(t);
datemap.put(d,l);
}

}
for (Date d : datemap.keyset()) {
List<client_objective_timeseries__c> r = datemap.get(d);
System.debug(r.size());
}

for (String s : runmap.keyset()) {
List<client_objective_timeseries__c> rl = runmap.get(s);
System.debug(rl.size());
}





for (client_objective_timeseries__c t: [select ts_load_datetime__c from client_objective_timeseries__c order by ts_load_datetime__c limit 2000]){
System.debug(t.ts_load_datetime__c);
}






Map<string,datetime> runmap = new Map<string,datetime>();

for (Timeseries_log__c tsl: [select name,ts_log_datetime__c from  timeseries_log__c]
) {
runmap.put(tsl.name,tsl.ts_log_datetime__c);
}

System.debug(runmap);

Set<string> runidSet =new Set<String>();

List<AggregateResult> arl = new List<AggregateResult>();
arl=[SELECT RunId__c,count(id) FROM Client_Objective_TimeSeries__c group by RunId__c];
for (AggregateResult ar : arl) {

String r = (String) ar.get('RunId__c');
runidSet.add(r);
}

System.debug('size='+runidSet.size());

for (String r : runidSet) {
List<AggregateResult> aggl= new List<AggregateResult>();
aggl=[SELECT Client__c, Status__c,count(id) FROM Client_Objective_TimeSeries__c where runid__c=:r group by client__c,Status__c];
System.debug(aggl.size());
System.debug(runmap.get(r));
List<client_objective_timeseries_rollup__c> cotsrulist = new  List<client_objective_timeseries_rollup__c>();
for (AggregateResult ar : aggl) {
client_objective_timeseries_rollup__c cotsru = new client_objective_timeseries_rollup__c();

Id clientId=(id)ar.get('Client__c');
DateTime rundatetime = (DateTime) runmap.get(r);
String runid = r;
String status = (String) ar.get('Status__c');
Integer statuscount = (Integer) ar.get('expr0');

System.debug(clientId);
cotsru.client__c=clientId;
cotsru.rundatetime__c=rundatetime;
cotsru.runid__c=r;
cotsru.status__c=status;
cotsru.statuscount__c=statuscount;
cotsrulist.add(cotsru);

}

insert cotsrulist;


}





L4LTimeSeries l = new L4LTimeSeries();
    Integer x = l.loadCOTimeSeries();
    System.debug('timeseries list tslist.size()=' + x);





SELECT session__r.name, session__r.client__c, session__r.client__r.name, program_name__c, objective__r.name  ,session__r.Date__c ,previous_status__c ,Percent_Correct__c,Responded_Percent_Correct__c,TotalAcquiredCorrect__c,TotalAcquiredIncorrect__c,TotalAcquiredNonResponsive__c,TotalAcquiredPrompted__c, SD_Name__c, SD_And_Objective_Str__c, session__r.Therapist_Name__c FROM Session_Statistics__c WHERE session__r.client__c = '0018t000002vfSfAAI'  AND session__r.Date__c = LAST_N_DAYS:90  ORDER BY session__r.name, objective__r.name 


  