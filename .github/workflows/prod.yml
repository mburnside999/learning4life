# A Unique name for this workflow
name: CI-LFLProduction

# Definition when the workflow should run
on:
  workflow_dispatch:

# Jobs to be executed
jobs:
  formatting-and-linting:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v3

      # Cache node_modules to speed up the process
      - name: Restore node_modules cache
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ env.cache-name }}-
            npm-
      # Install npm dependencies for Prettier and Jest
      - name: "Install npm dependencies"
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm install

      # Prettier checking
      - name: "Code formatting verification with Prettier"
        run: npm run prettier --check

      # ESlint
      - name: "Lint Lightning Web Components"
        run: npm run lint

  production-push:
    runs-on: ubuntu-latest
    needs: formatting-and-linting
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      # Install Salesforce CLI
      - name: "Install Salesforce CLI"
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v3

      # Store secret for review Production
      - name: "Populate auth file with LFL_HYPER_PRODUCTION_URL secret"
        shell: bash
        run: |
          echo ${{ secrets.LFL_HYPER_PRODUCTION_URL}} > ./LFL_HYPER_PRODUCTION_URL.txt
          secretFileSize=$(wc -c "./LFL_HYPER_PRODUCTION_URL.txt" | awk '{print $1}')
          if [ $secretFileSize == 1 ]; then
              echo "Missing LFL_HYPER_PRODUCTION_URL secret. Is this workflow running on a fork?";
              exit 1;
          fi
      # Authenticate Production
      - name: "Authenticate Production"
        run: sf org login sfdx-url --sfdx-url-file ./LFL_HYPER_PRODUCTION_URL.txt --alias LFLHyper --set-default

      # Run Deploy Custom Objects
      #- name: "Deploy Custom Objects"
      # run: sf project deploy start --metadata "CustomObject:Client_Objective__c, CustomObject:Client_Objective_TimeSeries__c,CustomObject:TimeSeries_Log__c,CustomObject:Incidental_Data__c,CustomObject:NDIS_Report__c,CustomObject:Objective__c,CustomObject:Program__c,CustomObject:SD__c,CustomObject:Session__c,CustomObject:Session_Obj__c,CustomObject:Session_Statistics__c" -u LFLHyper

      # Run Deploy CachePartitions
      - name: "Cache Partitions"
        run: sf project deploy start --metadata PlatformCachePartition --target-org LFLHyper

      # Run Deploy CustomMetadata
      - name: "Custom Metadata"
        run: sf project deploy start --metadata CustomMetadata --target-org LFLHyper

      # Run Deploy Apex
      - name: "Deploy Apex and Run Specified Tests"
        run: sf project deploy start --metadata AuraDefinitionBundle --metadata ApexClass --metadata ApexTrigger --metadata Flow --metadata LightningMessageChannel --target-org LFLHyper --test-level RunSpecifiedTests --tests TestL4LController TestL4LSessionStatsController TestL4LSDStageMap TestLFLUtil TestLFLSDWrapper TestL4LTimeSeries TestL4LTimeSeriesScheduler TestLFLClientObjectiveHelper TestLFLInvocableMasteryStatistics TestLFLInvocableReportWizard TestLFLInvocableSessionStatistics TestLFLPopulateTestData TestLFLProgramStatusCascadeUtil TestCascadeProgramStatusTrg TestCascadeSDStatusTrg TestDaysSinceUpdatedTr TestLFLSessionStatsTrg TestClientObjectiveList TestL4LNebulaComponentController TestL4LExceptionRateCalculation TestL4LExceptionClientObjectiveMissing TestTrgUniqueObjectivePerClientObjective TestLFLTimeSeriesBatch TestLFLTimeSeriesBatchScheduler TestLFLDTDRates TestLFLDTDRateMaster TestLFLInvocableListUnusedObj TestL4LStagesByArea TestLFLTSBatchUtil TestLFLTSBatchUtilScheduler

      # Run Deploy LWC
      - name: "Deploy LWC"
        run: sf project deploy start --metadata LightningComponentBundle --target-org LFLHyper

      # Run Run Apex tests
      - name: "Run Specifed Apex Tests to Gather Code Coverage"
        run: sf apex run test --test-level  RunSpecifiedTests --tests TestL4LController TestL4LSessionStatsController TestL4LSDStageMap TestLFLUtil TestLFLSDWrapper TestL4LTimeSeries TestL4LTimeSeriesScheduler TestLFLClientObjectiveHelper TestLFLInvocableMasteryStatistics TestLFLInvocableReportWizard TestLFLInvocableSessionStatistics TestLFLPopulateTestData TestLFLProgramStatusCascadeUtil TestCascadeProgramStatusTrg TestCascadeSDStatusTrg TestDaysSinceUpdatedTrg TestLFLSessionStatsTrg TestClientObjectiveList TestL4LNebulaComponentController TestL4LExceptionRateCalculation TestL4LExceptionClientObjectiveMissing TestTrgUniqueObjectivePerClientObjective TestLFLTimeSeriesBatch TestLFLTimeSeriesBatchScheduler TestLFLDTDRates TestLFLDTDRateMaster TestLFLInvocableListUnusedObj TestL4LStagesByArea  TestLFLTSBatchUtil TestLFLTSBatchUtilScheduler --target-org LFLHyper --code-coverage --result-format human --output-dir ./tests/apex -w 20

      # Delete temporary test file that Codecov is unable to parse
      #- name: "Delete coverage file (temporary step)"
      #  run: rm ./tests/apex/test-result-707*-codecoverage.json

      # Upload code coverage data
      - name: "Upload code coverage for Apex to Codecov.io"
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: Apex
